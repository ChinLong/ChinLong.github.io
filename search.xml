<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Directory-对Scala代码的移植]]></title>
    <url>%2F2018%2F09%2F01%2FDirectory-%E5%AF%B9Scala%E4%BB%A3%E7%A0%81%E7%9A%84%E7%A7%BB%E6%A4%8D%2F</url>
    <content type="text"><![CDATA[背景 在一个小项目中，想用Scala的Directory的类中一个方法，但项目中并不能加入Scala的依赖。所以就决定吧Scala代码移植为Java的代码。 分析 Scala中Directory继承Path，并重写了toAbsolute,toDirectory,toFile和normalize方法，新增了list,dirs,files,deepFiles,deepList方法。 其实Path类重写了java.io.File方法，所以我们只需要重写一个Directory即可。 代码展示 Gitee代码链接：点击这里 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071import java.io.File;import java.util.ArrayList;import java.util.Arrays;import java.util.Collection;import java.util.List;import java.util.stream.Collectors;import java.util.stream.Stream;public class Directory &#123; private final File file; public Directory(File file) &#123; this.file = file; &#125; public Directory(String filePath) &#123; this.file = new File(filePath); &#125; public File getFile() &#123; return this.file; &#125; public List&lt;Directory&gt; dirs() &#123; if (this.file.isDirectory()) &#123; File[] files = file.listFiles(File::isDirectory); if (files == null) &#123; return new ArrayList&lt;&gt;(); &#125; return Stream.of(files).map(Directory::new).collect(Collectors.toList()); &#125; else &#123; return new ArrayList&lt;&gt;(); &#125; &#125; public List&lt;File&gt; list() &#123; File[] files = file.listFiles(); if (files == null) &#123; return new ArrayList&lt;&gt;(); &#125; return new ArrayList&lt;&gt;(Arrays.asList(files)); &#125; public List&lt;File&gt; deepFiles() &#123; return deepList().stream().filter(File::isFile).collect(Collectors.toList()); &#125; public List&lt;File&gt; deepList() &#123; return deepList(-1); &#125; public List&lt;File&gt; deepList(int depth) &#123; if (depth &lt; 0) &#123; List&lt;File&gt; files1 = list(); List&lt;File&gt; files2 = dirs().stream().flatMap(v -&gt; v.deepList(-1).stream()) .collect(Collectors.toList()); files1.addAll(files2); return files1; &#125; else if (depth == 0) &#123; return new ArrayList&lt;&gt;(); &#125; else &#123; List&lt;File&gt; files1 = list(); List&lt;File&gt; files2 = dirs().stream().map(v -&gt; v.deepList(depth - 1)) .flatMap(Collection::stream).collect(Collectors.toList()); files1.addAll(files2); return files1; &#125; &#125;&#125;]]></content>
  </entry>
  <entry>
    <title><![CDATA[jQuery-Ajax的简单封装]]></title>
    <url>%2F2018%2F07%2F27%2FjQuery-Ajax%E7%AE%80%E5%8D%95%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[jQuery-Ajax简单封装最近在写一个小工具，因为小所以就只用了jQuery和Bootstrap。jQuery的ajax方法虽然很具体，但每次写这些就有点嫌多。对Ajax一些常用方法稍微封装了一下。 源码如下:123456789101112131415161718192021222324252627282930313233343536373839/** * Ajax异步请求 * async: true * * @param &#123;string&#125; url 请求URL * @param &#123;string&#125; type GET,POST,PUT,DELETE,HEAD,OPTION方法 * @param &#123;object&#125; callback 回调函数(optional) * @param &#123;object/string&#125; data 请求数据(optional) * @param &#123;object&#125; opt_settings 其他设定(optional) */ $.doAjax = function(url, type, callback, data, opt_settings) &#123; let obj = &#123; url : url, type : type, async : true &#125;; if (typeof callback === "object")&#123; if (typeof callback.success !== "undefined")&#123; obj.success = callback.success &#125; if (typeof callback.complete !== "undefined")&#123; obj.complete = callback.complete &#125; if (typeof callback.error !== "undefined")&#123; obj.error = callback.error &#125; &#125; if(typeof data !== "undefined")&#123; obj.data = typeof data === "object" ? JSON.stringify(data) : data; //obj.dataType = "json"; obj.contentType = "application/json"; &#125; $.ajax($.extend(obj, opt_settings)); &#125;; 调用：123456789101112131415161718192021222324252627282930let url1 = "/users";let url2 = "/users/1";let callback = &#123; success: function(json,xhr,option)&#123; console.log(json); &#125;, error: function(json,xhr,option)&#123; console.error(json); &#125;&#125;;// GET 查询所有用户$.doAjax(url1,"GET",callback1);let user = &#123; username: "xiaoming", sex: "male", age: "28"&#125;;// POST 新增用户$.doAjax(url2, "POST", callback, user);// PUT 新增用户$.doAjax(url2, "PUT", callback, user);// DELETE 删除用户$.doAjax(url2, "DELETE", callback); 这样就是一个简单的封装，使用起来还算比较方便。]]></content>
      <tags>
        <tag>jQuery</tag>
        <tag>Ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Chinlong's Blog]]></title>
    <url>%2F2018%2F07%2F01%2FChinlong's-Blog%2F</url>
    <content type="text"><![CDATA[初次搭建，多多关照。每月坚持写一篇，请监督！]]></content>
      <tags>
        <tag>welcome</tag>
      </tags>
  </entry>
</search>
